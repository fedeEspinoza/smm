c
json: {ruta: ruta.to_json }
json: ruta: {ruta.to_json}
json
ruta.to_json
ruta
user
user.id
ruta
c
current_user
c
current_user
c
session
c
session
c
sign_in user, store: false
user && Devise.secure_compare(user.authentication_token, 'P1LWHJuY53UNNskZ98G9')
if user && Devise.secure_compare(user.authentication_token, 'P1LWHJuY53UNNskZ98G9')
user
user = true && User.find_by_email(user_email)
user
user_email && User.find_by_email(user_email)
user_email = 'tomaestado@tomaestado.com'
user_email = 
params[:nombre] = 'tomaestado@tomaestado.com'
user_email
c
warden.user
session
session[:init] = true
session[:init]
session[:init
session
c
session[:current_user]
warden.user
session.current_use
session[:init] = true
session.load
session
@current_user
c
session
warden.user
c
warden.user
session
c
current_user
c
current_user.role? :tomaestado
current_user.role
current_user.roles?
current_user.roles
current_user.id
current_user
c
current_user
c
warden.authenticate!(scope: :restful)
warden.authenticate!(scope: :user)
wareden.authenticate!(scope: :user)
user.save!
request.params
require.params
params
c
session
current_user
warden.authenticate!(scope: :user)
params[:password]
params[:password] = params[:contrasenia]
params[:password] = params[:password]
params[:email]
params[:email] = params[:nombre]
params
warden.authenticate!(scope: :user)
c
current_user
session
c
session
c
session
c
session[:warden.user.user.key]
session
c
session
c
current_user
session
c
current_user[:encrypted_password]
currrent_user[:encrypted_password]
encrypted_password
current_user
c
session[:user]
session[:current_user]
session
current_user
c
session
current_user
c
current_user
sign_in(user)
user.sign_in
user
user = User.find_by(email: 'pepe@pepe.com')
current_user
user
user.
session
sessions
session
c
user_signed_in?
c
user_signed_in?
c
user_signed_in?
c
current_user
c
current_user
c
Devise.current_user
devise.current_user
current_user
c
current_user
current_session
user
c
user_params
c
usuario_params
c
usuario_params
c
usuario_params
c
usuario_params
c
usuario_params
c
usuario_params
c
usuario_params
c
usuario_params
c
usuario_params
c
usuario_params
c
usuario_params
c
usuario_params
c
zona_usuarios
usuario_params
c
usuario_params
c
ruta.zona
ruta
c
usuario_params[:persona_attributes][:id]
usuario_params[:persona_attributes].delete('id')
usuario_params[:persona_attributes][:id].present?
usuario_params[:persona_attributes].delete('id')
usuario_params[:persona_attributes][:id].present?
usuario_params[:persona_atributes][:id].present?
c
usuario_params[:persona_attributes][:id].present?
c
usuario_params[:persona_attributes][:id].present?
c
usuario_params
c
user_params
c
user_params
params
user_params
c
user_params
c
@user.roles
@user.user_roles
@user.roles
user_params
c
user_params
c
user_params
c
self.roles.find_by(descripcion: "jefe")
self.roles.find_by(description: "jefe")
self.roles.find_by_name("jefe")
c
self.roles.find_by_description("jefe")
self.roles
c
usuario_params
c
Usuario.new(usuario_params)
Udsuario.new(usuario_params)
c
usuario_params
c
usuario_params
c
usuario_params
c
usuario_params
c
usuario_params
c
usuario_params
c
usuario_params
c
Usuario.new(usuario_params)
c
Usuario.new(usuario_params)
c
Usuario.new(usuario_params)
c
Usuario.new(usuario_params)
usuario_params
c
Usuario.new(usuario_params)
usuario_params
c
usuario_params
c
Usuario.new(usuario_params)
usuario_params
c
@usuario.errors[:base] << "No puede asignar más de un medidor de energía eléctrica (Activa o Reactiva)"
@usuario.errors
c
@usuario.errors.messages.add("fdsfds")
@usuario.errors.message.add("fdsfds")
@usuario.errors.messages << "fdsfds"
@usuario.errors
@usuario.errors[:messages] << "fdfdsfs"
@usuario.errors
@usuario.errors.add(:messages, "fdfdsfs")
